social-recipe-app/
‚îÇ‚îÄ‚îÄ package.json                # Root (runs both frontend + backend)
‚îÇ‚îÄ‚îÄ README.md                   # Project docs
‚îÇ‚îÄ‚îÄ .gitignore                  # Ignore node_modules, env files etc.
‚îÇ
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îú‚îÄ‚îÄ server.js
‚îÇ   ‚îú‚îÄ‚îÄ .env
‚îÇ   ‚îú‚îÄ‚îÄ uploads/                # For recipe images
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ User.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Recipe.js
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ authRoutes.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ recipeRoutes.js
‚îÇ   ‚îî‚îÄ‚îÄ middleware/
‚îÇ       ‚îî‚îÄ‚îÄ auth.js
‚îÇ
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îú‚îÄ‚îÄ vite.config.js
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îî‚îÄ‚îÄ src/
‚îÇ       ‚îú‚îÄ‚îÄ main.jsx
‚îÇ       ‚îú‚îÄ‚îÄ App.jsx
‚îÇ       ‚îî‚îÄ‚îÄ components/
‚îÇ           ‚îú‚îÄ‚îÄ Navbar.jsx
‚îÇ           ‚îî‚îÄ‚îÄ RecipeCard.jsx
{
  "name": "social-recipe-app",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "install-all": "cd backend && npm install && cd ../frontend && npm install",
    "start": "concurrently \"cd backend && npm run dev\" \"cd frontend && npm run dev -- --host 0.0.0.0 --port 5173\""
  },
  "devDependencies": {
    "concurrently": "^8.0.0"
  }
}
#!/bin/bash
cd backend
npm run dev &
BACKEND_PID=$!
cd ../frontend
npm run dev -- --host 0.0.0.0 --port 5173 &
FRONT_PID=$!
wait $BACKEND_PID $FRONT_PID
node_modules/
.env
backend/uploads/
# üç≤ Social Recipe App

A social recipe-sharing app where users can:
- Register/login
- Upload recipes with images
- Edit, save, and categorize recipes
- Comment and give feedback
- Chat with other users

## üõ† Tech Stack
- Backend: Node.js, Express, MongoDB, Socket.io
- Frontend: React (Vite), Axios
- Media uploads: Multer (can switch to Cloudinary later)

## üöÄ How to run
1. Clone repo  
2. Install all dependencies:
   ```bash
   npm run install-all
npm run start

---

# üñ• Backend files

**`backend/package.json`**
```json
{
  "name": "backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "dev": "nodemon server.js",
    "start": "node server.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.0",
    "mongoose": "^7.3.0",
    "multer": "^1.4.5",
    "socket.io": "^4.7.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const http = require('http');
const { Server } = require('socket.io');
const path = require('path');

dotenv.config();
const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

app.use(cors());
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// routes
const authRoutes = require('./routes/authRoutes');
const recipeRoutes = require('./routes/recipeRoutes');
app.use('/api/auth', authRoutes);
app.use('/api/recipes', recipeRoutes);

// socket.io for messaging
io.on('connection', socket => {
  console.log('User connected:', socket.id);
  socket.on('chatMessage', (msg) => {
    io.emit('chatMessage', msg);
  });
});

mongoose.connect(process.env.MONGODB_URI)
  .then(() => {
    console.log("MongoDB connected");
    const PORT = process.env.PORT || 3000;
    server.listen(PORT, () => console.log("Server running on port", PORT));
  })
  .catch(err => console.log(err));
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

module.exports = mongoose.model('User', userSchema);
const mongoose = require('mongoose');

const recipeSchema = new mongoose.Schema({
  title: String,
  description: String,
  ingredients: [String],
  steps: [String],
  servings: Number,
  image: String,
  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  comments: [{
    text: String,
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
  }]
}, { timestamps: true });

module.exports = mongoose.model('Recipe', recipeSchema);
const jwt = require('jsonwebtoken');

module.exports = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) return res.status(401).json({ error: "No token provided" });
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = decoded.id;
    next();
  } catch (err) {
    res.status(401).json({ error: "Invalid token" });
  }
};
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

router.post('/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;
    const hashed = await bcrypt.hash(password, 10);
    const user = await User.create({ username, email, password: hashed });
    res.json(user);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ error: "User not found" });
  const match = await bcrypt.compare(password, user.password);
  if (!match) return res.status(400).json({ error: "Invalid credentials" });
  const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1d' });
  res.json({ token, user });
});

module.exports = router;
const express = require('express');
const router = express.Router();
const multer = require('multer');
const Recipe = require('../models/Recipe');
const auth = require('../middleware/auth');

const storage = multer.diskStorage({
  destination: 'backend/uploads/',
  filename: (req, file, cb) => cb(null, Date.now() + '-' + file.originalname)
});
const upload = multer({ storage });

// create recipe
router.post('/', auth, upload.single('image'), async (req, res) => {
  try {
    const recipe = new Recipe({
      ...req.body,
      ingredients: req.body.ingredients.split(','),
      steps: req.body.steps.split(','),
      image: req.file ? `/uploads/${req.file.filename}` : null,
      createdBy: req.userId
    });
    await recipe.save();
    res.json(recipe);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// get all recipes
router.get('/', async (req, res) => {
  const recipes = await Recipe.find().populate('createdBy', 'username');
  res.json(recipes);
});

module.exports = router;
MONGODB_URI=your_mongodb_uri
JWT_SECRET=supersecret
{
  "name": "frontend",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.4.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "socket.io-client": "^4.7.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^4.4.0"
  }
}
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    host: '0.0.0.0',
    port: 5173
  }
});
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import RecipeCard from './components/RecipeCard';
import Navbar from './components/Navbar';

const API_URL = import.meta.env.VITE_API_URL || "http://localhost:3000/api";

function App() {
  const [recipes, setRecipes] = useState([]);

  useEffect(() => {
    axios.get(`${API_URL}/recipes`).then(res => setRecipes(res.data));
  }, []);

  return (
    <div>
      <Navbar />
      <h1 className="text-xl font-bold text-center">üç≤ Social Recipe App</h1>
      <div className="grid grid-cols-3 gap-4 p-4">
        {recipes.map(r => <RecipeCard key={r._id} recipe={r} />)}
      </div>
    </div>
  );
}

export default App;
import React from 'react';

export default function Navbar() {
  return (
    <nav className="p-4 bg-orange-200">
      <h2 className="font-bold">Recipe App</h2>
    </nav>
  );
}
import React from 'react';

export default function RecipeCard({ recipe }) {
  return (
    <div className="border p-2 rounded">
      {recipe.image && <img src={recipe.image} alt={recipe.title} />}
      <h3 className="font-semibold">{recipe.title}</h3>
      <p>{recipe.description}</p>
    </div>
  );
}
